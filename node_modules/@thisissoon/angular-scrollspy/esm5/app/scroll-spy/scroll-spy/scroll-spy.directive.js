/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ContentChildren, QueryList, Input, } from '@angular/core';
import { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';
import { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';
/**
 * Adds `active` class to navigation links when section is in the viewport.
 * Used in conjuction with `snScrollItem` directive which should be added
 * to anchor links in the nav
 *
 * \@example
 * ```
 * <ul role="navigation" snScrollSpy id="foo">
 *  <li><a snScrollSpyItem for="foo" href="#section1">Section 1</a></li>
 *  <li><a snScrollSpyItem for="foo" href="#section2">Section 2</a></li>
 *  <li><a snScrollSpyItem for="foo" href="#section3">Section 3</a></li>
 *  <li><a snScrollSpyItem for="foo" href="#section4">Section 4</a></li>
 * </ul>
 * ```
 *
 */
var ScrollSpyDirective = /** @class */ (function () {
    /**
     * Creates an instance of ScrollSpyDirective.
     * @memberof ScrollSpyDirective
     */
    function ScrollSpyDirective(scrollSpySvc) {
        this.scrollSpySvc = scrollSpySvc;
    }
    /**
     * Adds spy to list of spys in `ScrollSpyService`
     *
     * @memberof ScrollSpyDirective
     */
    /**
     * Adds spy to list of spys in `ScrollSpyService`
     *
     * \@memberof ScrollSpyDirective
     * @return {?}
     */
    ScrollSpyDirective.prototype.ngAfterViewInit = /**
     * Adds spy to list of spys in `ScrollSpyService`
     *
     * \@memberof ScrollSpyDirective
     * @return {?}
     */
    function () {
        this.scrollSpySvc.addSpy(this.id, this.items);
    };
    /**
     * Remove spy from list of spys when directive is destroyed
     *
     * @memberof ScrollSpyDirective
     */
    /**
     * Remove spy from list of spys when directive is destroyed
     *
     * \@memberof ScrollSpyDirective
     * @return {?}
     */
    ScrollSpyDirective.prototype.ngOnDestroy = /**
     * Remove spy from list of spys when directive is destroyed
     *
     * \@memberof ScrollSpyDirective
     * @return {?}
     */
    function () {
        this.scrollSpySvc.removeSpy(this.id);
    };
    ScrollSpyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[snScrollSpy]',
                },] }
    ];
    /** @nocollapse */
    ScrollSpyDirective.ctorParameters = function () { return [
        { type: ScrollSpyService }
    ]; };
    ScrollSpyDirective.propDecorators = {
        items: [{ type: ContentChildren, args: [ScrollSpyItemDirective,] }],
        id: [{ type: Input }]
    };
    return ScrollSpyDirective;
}());
export { ScrollSpyDirective };
if (false) {
    /**
     * Collection of `ScrollSpyItem`. They are the list of
     * nav items.
     *
     * \@memberof ScrollSpyDirective
     * @type {?}
     */
    ScrollSpyDirective.prototype.items;
    /**
     * ID of scrollSpy instance
     *
     * \@memberof ScrollSpyDirective
     * @type {?}
     */
    ScrollSpyDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyDirective.prototype.scrollSpySvc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGhpc2lzc29vbi9hbmd1bGFyLXNjcm9sbHNweS8iLCJzb3VyY2VzIjpbImFwcC9zY3JvbGwtc3B5L3Njcm9sbC1zcHkvc2Nyb2xsLXNweS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsZUFBZSxFQUNmLFNBQVMsRUFFVCxLQUFLLEdBRU4sTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDdEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMENBQTBDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0I1RTtJQW1CRTs7O09BR0c7SUFDSCw0QkFBb0IsWUFBOEI7UUFBOUIsaUJBQVksR0FBWixZQUFZLENBQWtCO0lBQUcsQ0FBQztJQUN0RDs7OztPQUlHOzs7Ozs7O0lBQ0ksNENBQWU7Ozs7OztJQUF0QjtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDRDs7OztPQUlHOzs7Ozs7O0lBQ0ksd0NBQVc7Ozs7OztJQUFsQjtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDOztnQkF2Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO2lCQUMxQjs7OztnQkFwQlEsZ0JBQWdCOzs7d0JBNEJ0QixlQUFlLFNBQUMsc0JBQXNCO3FCQU90QyxLQUFLOztJQXVCUix5QkFBQztDQUFBLEFBeENELElBd0NDO1NBckNZLGtCQUFrQjs7Ozs7Ozs7O0lBTzdCLG1DQUNnRDs7Ozs7OztJQU1oRCxnQ0FDa0I7Ozs7O0lBS04sMENBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCxcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFNjcm9sbFNweUl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuLi9zY3JvbGwtc3B5LWl0ZW0vc2Nyb2xsLXNweS1pdGVtLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTY3JvbGxTcHlTZXJ2aWNlIH0gZnJvbSAnLi4vc2Nyb2xsLXNweS1zZXJ2aWNlL3Njcm9sbC1zcHkuc2VydmljZSc7XG5cbi8qKlxuICogQWRkcyBgYWN0aXZlYCBjbGFzcyB0byBuYXZpZ2F0aW9uIGxpbmtzIHdoZW4gc2VjdGlvbiBpcyBpbiB0aGUgdmlld3BvcnQuXG4gKiBVc2VkIGluIGNvbmp1Y3Rpb24gd2l0aCBgc25TY3JvbGxJdGVtYCBkaXJlY3RpdmUgd2hpY2ggc2hvdWxkIGJlIGFkZGVkXG4gKiB0byBhbmNob3IgbGlua3MgaW4gdGhlIG5hdlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIDx1bCByb2xlPVwibmF2aWdhdGlvblwiIHNuU2Nyb2xsU3B5IGlkPVwiZm9vXCI+XG4gKiAgPGxpPjxhIHNuU2Nyb2xsU3B5SXRlbSBmb3I9XCJmb29cIiBocmVmPVwiI3NlY3Rpb24xXCI+U2VjdGlvbiAxPC9hPjwvbGk+XG4gKiAgPGxpPjxhIHNuU2Nyb2xsU3B5SXRlbSBmb3I9XCJmb29cIiBocmVmPVwiI3NlY3Rpb24yXCI+U2VjdGlvbiAyPC9hPjwvbGk+XG4gKiAgPGxpPjxhIHNuU2Nyb2xsU3B5SXRlbSBmb3I9XCJmb29cIiBocmVmPVwiI3NlY3Rpb24zXCI+U2VjdGlvbiAzPC9hPjwvbGk+XG4gKiAgPGxpPjxhIHNuU2Nyb2xsU3B5SXRlbSBmb3I9XCJmb29cIiBocmVmPVwiI3NlY3Rpb240XCI+U2VjdGlvbiA0PC9hPjwvbGk+XG4gKiA8L3VsPlxuICogYGBgXG4gKlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc25TY3JvbGxTcHldJyxcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsU3B5RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIENvbGxlY3Rpb24gb2YgYFNjcm9sbFNweUl0ZW1gLiBUaGV5IGFyZSB0aGUgbGlzdCBvZlxuICAgKiBuYXYgaXRlbXMuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBTY3JvbGxTcHlEaXJlY3RpdmVcbiAgICovXG4gIEBDb250ZW50Q2hpbGRyZW4oU2Nyb2xsU3B5SXRlbURpcmVjdGl2ZSlcbiAgcHVibGljIGl0ZW1zOiBRdWVyeUxpc3Q8U2Nyb2xsU3B5SXRlbURpcmVjdGl2ZT47XG4gIC8qKlxuICAgKiBJRCBvZiBzY3JvbGxTcHkgaW5zdGFuY2VcbiAgICpcbiAgICogQG1lbWJlcm9mIFNjcm9sbFNweURpcmVjdGl2ZVxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIGlkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFNjcm9sbFNweURpcmVjdGl2ZS5cbiAgICogQG1lbWJlcm9mIFNjcm9sbFNweURpcmVjdGl2ZVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzY3JvbGxTcHlTdmM6IFNjcm9sbFNweVNlcnZpY2UpIHt9XG4gIC8qKlxuICAgKiBBZGRzIHNweSB0byBsaXN0IG9mIHNweXMgaW4gYFNjcm9sbFNweVNlcnZpY2VgXG4gICAqXG4gICAqIEBtZW1iZXJvZiBTY3JvbGxTcHlEaXJlY3RpdmVcbiAgICovXG4gIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zY3JvbGxTcHlTdmMuYWRkU3B5KHRoaXMuaWQsIHRoaXMuaXRlbXMpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgc3B5IGZyb20gbGlzdCBvZiBzcHlzIHdoZW4gZGlyZWN0aXZlIGlzIGRlc3Ryb3llZFxuICAgKlxuICAgKiBAbWVtYmVyb2YgU2Nyb2xsU3B5RGlyZWN0aXZlXG4gICAqL1xuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zY3JvbGxTcHlTdmMucmVtb3ZlU3B5KHRoaXMuaWQpO1xuICB9XG59XG4iXX0=