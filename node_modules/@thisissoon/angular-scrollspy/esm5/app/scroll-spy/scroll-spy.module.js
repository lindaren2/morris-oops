/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { InViewportModule } from '@thisissoon/angular-inviewport';
import { ScrollSpyDirective } from './scroll-spy/scroll-spy.directive';
import { ScrollSpySectionComponent } from './scroll-spy-section/scroll-spy-section.component';
import { ScrollSpyItemDirective } from './scroll-spy-item/scroll-spy-item.directive';
import { ScrollSpyService } from './scroll-spy-service/scroll-spy.service';
/** @type {?} */
var directives = [ScrollSpyDirective, ScrollSpyItemDirective];
/** @type {?} */
var components = [ScrollSpySectionComponent];
/** @type {?} */
var providers = [ScrollSpyService];
/**
 * A simple lightweight library for Angular which automatically
 * updates links to indicate the currently active section in the viewport
 *
 */
var ScrollSpyModule = /** @class */ (function () {
    function ScrollSpyModule() {
    }
    /**
     * Specify a static method for root module to ensure providers are
     * only provided once but allows the module to still be imported
     * into other modules without reproviding services.
     *
     * @memberof ScrollSpyModule
     */
    /**
     * Specify a static method for root module to ensure providers are
     * only provided once but allows the module to still be imported
     * into other modules without reproviding services.
     *
     * \@memberof ScrollSpyModule
     * @return {?}
     */
    ScrollSpyModule.forRoot = /**
     * Specify a static method for root module to ensure providers are
     * only provided once but allows the module to still be imported
     * into other modules without reproviding services.
     *
     * \@memberof ScrollSpyModule
     * @return {?}
     */
    function () {
        return {
            ngModule: ScrollSpyModule,
            providers: tslib_1.__spread(providers),
        };
    };
    ScrollSpyModule.decorators = [
        { type: NgModule, args: [{
                    imports: [InViewportModule],
                    declarations: tslib_1.__spread(directives, components),
                    exports: tslib_1.__spread(directives, components),
                },] }
    ];
    return ScrollSpyModule;
}());
export { ScrollSpyModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGhpc2lzc29vbi9hbmd1bGFyLXNjcm9sbHNweS8iLCJzb3VyY2VzIjpbImFwcC9zY3JvbGwtc3B5L3Njcm9sbC1zcHkubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBaUMsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFbEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDOUYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDckYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUNBQXlDLENBQUM7O0lBRXJFLFVBQVUsR0FBVSxDQUFDLGtCQUFrQixFQUFFLHNCQUFzQixDQUFDOztJQUVoRSxVQUFVLEdBQVUsQ0FBQyx5QkFBeUIsQ0FBQzs7SUFFL0MsU0FBUyxHQUFlLENBQUMsZ0JBQWdCLENBQUM7Ozs7OztBQU9oRDtJQUFBO0lBbUJBLENBQUM7SUFiQzs7Ozs7O09BTUc7Ozs7Ozs7OztJQUNXLHVCQUFPOzs7Ozs7OztJQUFyQjtRQUNFLE9BQU87WUFDTCxRQUFRLEVBQUUsZUFBZTtZQUN6QixTQUFTLG1CQUFNLFNBQVMsQ0FBQztTQUMxQixDQUFDO0lBQ0osQ0FBQzs7Z0JBbEJGLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDM0IsWUFBWSxtQkFBTSxVQUFVLEVBQUssVUFBVSxDQUFDO29CQUM1QyxPQUFPLG1CQUFNLFVBQVUsRUFBSyxVQUFVLENBQUM7aUJBQ3hDOztJQWVELHNCQUFDO0NBQUEsQUFuQkQsSUFtQkM7U0FkWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJblZpZXdwb3J0TW9kdWxlIH0gZnJvbSAnQHRoaXNpc3Nvb24vYW5ndWxhci1pbnZpZXdwb3J0JztcblxuaW1wb3J0IHsgU2Nyb2xsU3B5RGlyZWN0aXZlIH0gZnJvbSAnLi9zY3JvbGwtc3B5L3Njcm9sbC1zcHkuZGlyZWN0aXZlJztcbmltcG9ydCB7IFNjcm9sbFNweVNlY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3Njcm9sbC1zcHktc2VjdGlvbi9zY3JvbGwtc3B5LXNlY3Rpb24uY29tcG9uZW50JztcbmltcG9ydCB7IFNjcm9sbFNweUl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuL3Njcm9sbC1zcHktaXRlbS9zY3JvbGwtc3B5LWl0ZW0uZGlyZWN0aXZlJztcbmltcG9ydCB7IFNjcm9sbFNweVNlcnZpY2UgfSBmcm9tICcuL3Njcm9sbC1zcHktc2VydmljZS9zY3JvbGwtc3B5LnNlcnZpY2UnO1xuXG5jb25zdCBkaXJlY3RpdmVzOiBhbnlbXSA9IFtTY3JvbGxTcHlEaXJlY3RpdmUsIFNjcm9sbFNweUl0ZW1EaXJlY3RpdmVdO1xuXG5jb25zdCBjb21wb25lbnRzOiBhbnlbXSA9IFtTY3JvbGxTcHlTZWN0aW9uQ29tcG9uZW50XTtcblxuY29uc3QgcHJvdmlkZXJzOiBQcm92aWRlcltdID0gW1Njcm9sbFNweVNlcnZpY2VdO1xuXG4vKipcbiAqIEEgc2ltcGxlIGxpZ2h0d2VpZ2h0IGxpYnJhcnkgZm9yIEFuZ3VsYXIgd2hpY2ggYXV0b21hdGljYWxseVxuICogdXBkYXRlcyBsaW5rcyB0byBpbmRpY2F0ZSB0aGUgY3VycmVudGx5IGFjdGl2ZSBzZWN0aW9uIGluIHRoZSB2aWV3cG9ydFxuICpcbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0luVmlld3BvcnRNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFsuLi5kaXJlY3RpdmVzLCAuLi5jb21wb25lbnRzXSxcbiAgZXhwb3J0czogWy4uLmRpcmVjdGl2ZXMsIC4uLmNvbXBvbmVudHNdLFxufSlcbmV4cG9ydCBjbGFzcyBTY3JvbGxTcHlNb2R1bGUge1xuICAvKipcbiAgICogU3BlY2lmeSBhIHN0YXRpYyBtZXRob2QgZm9yIHJvb3QgbW9kdWxlIHRvIGVuc3VyZSBwcm92aWRlcnMgYXJlXG4gICAqIG9ubHkgcHJvdmlkZWQgb25jZSBidXQgYWxsb3dzIHRoZSBtb2R1bGUgdG8gc3RpbGwgYmUgaW1wb3J0ZWRcbiAgICogaW50byBvdGhlciBtb2R1bGVzIHdpdGhvdXQgcmVwcm92aWRpbmcgc2VydmljZXMuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBTY3JvbGxTcHlNb2R1bGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFNjcm9sbFNweU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogWy4uLnByb3ZpZGVyc10sXG4gICAgfTtcbiAgfVxufVxuIl19