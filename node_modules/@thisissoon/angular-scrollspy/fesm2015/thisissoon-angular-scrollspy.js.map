{"version":3,"file":"thisissoon-angular-scrollspy.js.map","sources":["ng://@thisissoon/angular-scrollspy/app/scroll-spy/scroll-spy-item/scroll-spy-item.directive.ts","ng://@thisissoon/angular-scrollspy/app/scroll-spy/scroll-spy-service/scroll-spy.service.ts","ng://@thisissoon/angular-scrollspy/app/scroll-spy/scroll-spy/scroll-spy.directive.ts","ng://@thisissoon/angular-scrollspy/app/scroll-spy/scroll-spy-section/scroll-spy-section.component.ts","ng://@thisissoon/angular-scrollspy/app/scroll-spy/scroll-spy.module.ts"],"sourcesContent":["import {\n  Directive,\n  Input,\n  HostBinding,\n  ChangeDetectorRef,\n} from '@angular/core';\n\n/**\n * A directive used to add an `active` class to a nav item\n * when the section is in the viewport\n *\n * @example\n * ```html\n * <a snScrollSpyItem for=\"foo\" href=\"#section1\">Section 1</a>\n * ```\n *\n */\n@Directive({\n  selector: '[snScrollSpyItem]',\n})\nexport class ScrollSpyItemDirective {\n  /**\n   * True if the nav item is the active item in the `items` list\n   * for `ScrollSpyDirective` instance\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  @HostBinding('class.active')\n  public active = false;\n  /**\n   * ID of `ScrollSpyDirective` instance\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  @Input()\n  public for: string;\n  /**\n   * Hash for section to link to\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  @Input()\n  public href: string;\n  /**\n   * If true means the section is in the viewport\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  public inViewport = false;\n  /**\n   * Id of section that links navigates to\n   *\n   * @readonly\n   * @memberof ScrollSpyItemDirective\n   */\n  public get section(): string {\n    return this.href.replace('#', '');\n  }\n  /**\n   * Creates an instance of ScrollSpyItemDirective.\n   * @memberof ScrollSpyItemDirective\n   */\n  constructor(private cdRef: ChangeDetectorRef) {}\n  /**\n   * Manually trigger change detection\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  public detectChanges(): void {\n    this.cdRef.detectChanges();\n  }\n}\n","import { Injectable, QueryList } from '@angular/core';\n\nimport { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';\nimport { Spy } from '../shared/spy.model';\n\n/**\n * Service that stores a list of `Spy`'s and the state\n * of their nav items `inViewport` and `active` state\n *\n */\n@Injectable()\nexport class ScrollSpyService {\n  /**\n   * List of `Spy`'s\n   *\n   * @memberof ScrollSpyService\n   */\n  public spys: Spy[] = [];\n  /**\n   * Stores requests to add items to spy when spy hasn't been created\n   * yet. Once spy has been added then request will be made again.\n   *\n   * @memberof ScrollSpyService\n   */\n  public buffer: any[] = [];\n  /**\n   * Add spy to list of `spys`\n   *\n   * @memberof ScrollSpyService\n   */\n  public addSpy(id: string, items: QueryList<ScrollSpyItemDirective>): void {\n    this.spys.push({ id, items });\n    const buffer = this.buffer.filter(i => i.spyId === id);\n    this.buffer = this.buffer.filter(i => i.spyId !== id);\n    buffer.forEach(i =>\n      this.setSpySectionStatus(i.sectionId, i.spyId, i.inViewport),\n    );\n  }\n  /**\n   * Remove spy from list of `spys`\n   *\n   * @memberof ScrollSpyService\n   */\n  public removeSpy(id: string): void {\n    const i = this.spys.findIndex(s => s.id === id);\n    this.spys.splice(i, 1);\n  }\n  /**\n   * Set the `inViewport` status for a spy item then sets the active\n   * to true for the first item in the list that has `inViewport`\n   * set to true\n   *\n   * @memberof ScrollSpyService\n   */\n  public setSpySectionStatus(\n    sectionId: string,\n    spyId: string,\n    inViewport: boolean,\n  ): void {\n    const spy = this.spys.find(s => s.id === spyId);\n    if (!spy) {\n      this.buffer.push({ sectionId, spyId, inViewport });\n      return;\n    }\n    const item = spy.items.find(i => i.section === sectionId);\n    if (!item) {\n      return;\n    }\n\n    item.inViewport = inViewport;\n    const firstInViewport = spy.items.filter(i => i.inViewport)[0];\n    spy.items.forEach(i => (i.active = false));\n\n    if (firstInViewport) {\n      firstInViewport.active = true;\n      firstInViewport.detectChanges();\n    }\n  }\n}\n","import {\n  Directive,\n  ContentChildren,\n  QueryList,\n  AfterViewInit,\n  Input,\n  OnDestroy,\n} from '@angular/core';\n\nimport { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';\nimport { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';\n\n/**\n * Adds `active` class to navigation links when section is in the viewport.\n * Used in conjuction with `snScrollItem` directive which should be added\n * to anchor links in the nav\n *\n * @example\n * ```\n * <ul role=\"navigation\" snScrollSpy id=\"foo\">\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section1\">Section 1</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section2\">Section 2</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section3\">Section 3</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section4\">Section 4</a></li>\n * </ul>\n * ```\n *\n */\n@Directive({\n  selector: '[snScrollSpy]',\n})\nexport class ScrollSpyDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Collection of `ScrollSpyItem`. They are the list of\n   * nav items.\n   *\n   * @memberof ScrollSpyDirective\n   */\n  @ContentChildren(ScrollSpyItemDirective)\n  public items: QueryList<ScrollSpyItemDirective>;\n  /**\n   * ID of scrollSpy instance\n   *\n   * @memberof ScrollSpyDirective\n   */\n  @Input()\n  public id: string;\n  /**\n   * Creates an instance of ScrollSpyDirective.\n   * @memberof ScrollSpyDirective\n   */\n  constructor(private scrollSpySvc: ScrollSpyService) {}\n  /**\n   * Adds spy to list of spys in `ScrollSpyService`\n   *\n   * @memberof ScrollSpyDirective\n   */\n  public ngAfterViewInit(): void {\n    this.scrollSpySvc.addSpy(this.id, this.items);\n  }\n  /**\n   * Remove spy from list of spys when directive is destroyed\n   *\n   * @memberof ScrollSpyDirective\n   */\n  public ngOnDestroy(): void {\n    this.scrollSpySvc.removeSpy(this.id);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';\n\n/**\n * A component to wrap section content within that will update the\n * `ScrollSpyService` when it's in view\n *\n * @example\n * ```html\n *  <sn-scroll-spy-section id=\"section1\" for=\"foo\">\n *    ...\n *  </sn-scroll-spy-section>\n * ```\n */\n@Component({\n  selector: 'sn-scroll-spy-section',\n  templateUrl: './scroll-spy-section.component.html',\n  styleUrls: ['./scroll-spy-section.component.scss'],\n})\nexport class ScrollSpySectionComponent {\n  /**\n   * Identifies the section\n   *\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public id: string;\n  /**\n   * Specifies which `ScrollSpy` instance to update\n   *\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public for: string;\n  /**\n   * Creates an instance of ScrollSpySectionComponent.\n   * @memberof ScrollSpySectionComponent\n   */\n  constructor(private scrollSpySvc: ScrollSpyService) {}\n  /**\n   * Updates `ScrollSpy` section when element enters/leaves viewport\n   *\n   * @memberof ScrollSpySectionComponent\n   */\n  public onInViewportChange(inViewport: boolean): void {\n    this.scrollSpySvc.setSpySectionStatus(this.id, this.for, inViewport);\n  }\n}\n","import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { InViewportModule } from '@thisissoon/angular-inviewport';\n\nimport { ScrollSpyDirective } from './scroll-spy/scroll-spy.directive';\nimport { ScrollSpySectionComponent } from './scroll-spy-section/scroll-spy-section.component';\nimport { ScrollSpyItemDirective } from './scroll-spy-item/scroll-spy-item.directive';\nimport { ScrollSpyService } from './scroll-spy-service/scroll-spy.service';\n\nconst directives: any[] = [ScrollSpyDirective, ScrollSpyItemDirective];\n\nconst components: any[] = [ScrollSpySectionComponent];\n\nconst providers: Provider[] = [ScrollSpyService];\n\n/**\n * A simple lightweight library for Angular which automatically\n * updates links to indicate the currently active section in the viewport\n *\n */\n@NgModule({\n  imports: [InViewportModule],\n  declarations: [...directives, ...components],\n  exports: [...directives, ...components],\n})\nexport class ScrollSpyModule {\n  /**\n   * Specify a static method for root module to ensure providers are\n   * only provided once but allows the module to still be imported\n   * into other modules without reproviding services.\n   *\n   * @memberof ScrollSpyModule\n   */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ScrollSpyModule,\n      providers: [...providers],\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
