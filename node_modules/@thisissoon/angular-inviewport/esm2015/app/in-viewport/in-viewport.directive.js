/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostBinding, EventEmitter, Output, Inject, Input } from '@angular/core';
import { WINDOW } from '../window/window-token';
/**
 * A simple lightweight library for Angular with that detects when an
 * element is within the browsers viewport and adds a `in-viewport` or
 * `not-in-viewport` class to the element.
 *
 * \@example
 * ```html
 * <p
 *  class="foo"
 *  snInViewport
 *  (inViewportChange)="myEventHandler($event)">
 *  Amet tempor excepteur occaecat nulla.
 * </p>
 * ```
 */
// @dynamic
export class InViewportDirective {
    /**
     * @param {?} el
     * @param {?} window
     */
    constructor(el, window) {
        this.el = el;
        this.window = window;
        this.inViewportChange = new EventEmitter();
        this.hasIntersectionObserver = this.intersectionObserverFeatureDetection();
    }
    /**
     * @return {?}
     */
    get isInViewport() {
        return this.inViewport;
    }
    /**
     * @return {?}
     */
    get isNotInViewport() {
        return !this.inViewport;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.hasIntersectionObserver) {
            this.inViewport = true;
            this.inViewportChange.emit(this.inViewport);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.hasIntersectionObserver) {
            /** @type {?} */
            const IntersectionObserver = this.window['IntersectionObserver'];
            this.observer = new IntersectionObserver(this.intersectionObserverCallback.bind(this), this.inViewportOptions);
            this.observer.observe(this.el.nativeElement);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.observer) {
            this.observer.unobserve(this.el.nativeElement);
        }
    }
    /**
     * @param {?} entries
     * @return {?}
     */
    intersectionObserverCallback(entries) {
        entries.forEach(entry => {
            if (this.inViewport === entry.isIntersecting)
                return;
            this.inViewport = entry.isIntersecting;
            this.inViewportChange.emit(this.inViewport);
        });
    }
    /**
     * @private
     * @return {?}
     */
    intersectionObserverFeatureDetection() {
        // Exits early if all IntersectionObserver and IntersectionObserverEntry
        // features are natively supported.
        if ('IntersectionObserver' in this.window &&
            'IntersectionObserverEntry' in this.window) {
            // Minimal polyfill for Edge 15's lack of `isIntersecting`
            // See: https://github.com/w3c/IntersectionObserver/issues/211
            if (!('isIntersecting' in
                this.window['IntersectionObserverEntry']['prototype'])) {
                Object.defineProperty(this.window['IntersectionObserverEntry']['prototype'], 'isIntersecting', {
                    get: function () {
                        return this.intersectionRatio > 0;
                    }
                });
            }
            return true;
        }
        return false;
    }
}
InViewportDirective.decorators = [
    { type: Directive, args: [{
                selector: '[snInViewport]',
                exportAs: 'snInViewport'
            },] }
];
/** @nocollapse */
InViewportDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] }
];
InViewportDirective.propDecorators = {
    inViewportOptions: [{ type: Input }],
    inViewportChange: [{ type: Output }],
    isInViewport: [{ type: HostBinding, args: ['class.sn-viewport--in',] }],
    isNotInViewport: [{ type: HostBinding, args: ['class.sn-viewport--out',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    InViewportDirective.prototype.inViewport;
    /**
     * @type {?}
     * @private
     */
    InViewportDirective.prototype.hasIntersectionObserver;
    /** @type {?} */
    InViewportDirective.prototype.inViewportOptions;
    /** @type {?} */
    InViewportDirective.prototype.inViewportChange;
    /** @type {?} */
    InViewportDirective.prototype.observer;
    /**
     * @type {?}
     * @private
     */
    InViewportDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    InViewportDirective.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW4tdmlld3BvcnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRoaXNpc3Nvb24vYW5ndWxhci1pbnZpZXdwb3J0LyIsInNvdXJjZXMiOlsiYXBwL2luLXZpZXdwb3J0L2luLXZpZXdwb3J0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBR04sTUFBTSxFQUNOLEtBQUssRUFFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JoRCxNQUFNLE9BQU8sbUJBQW1COzs7OztJQW1COUIsWUFBb0IsRUFBYyxFQUEwQixNQUFjO1FBQXRELE9BQUUsR0FBRixFQUFFLENBQVk7UUFBMEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQWIxRSxxQkFBZ0IsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBYzdDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsb0NBQW9DLEVBQUUsQ0FBQztJQUM3RSxDQUFDOzs7O0lBWkQsSUFDSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCxJQUNJLGVBQWU7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDMUIsQ0FBQzs7OztJQU1ELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFO1lBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzdDO0lBQ0gsQ0FBQzs7OztJQUVELGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTs7a0JBQzFCLG9CQUFvQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUM7WUFDaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLG9CQUFvQixDQUN0QyxJQUFJLENBQUMsNEJBQTRCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUM1QyxJQUFJLENBQUMsaUJBQWlCLENBQ3ZCLENBQUM7WUFFRixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzlDO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUM7Ozs7O0lBRUQsNEJBQTRCLENBQUMsT0FBb0M7UUFDL0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDLGNBQWM7Z0JBQUUsT0FBTztZQUNyRCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7WUFDdkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVPLG9DQUFvQztRQUMxQyx3RUFBd0U7UUFDeEUsbUNBQW1DO1FBQ25DLElBQ0Usc0JBQXNCLElBQUksSUFBSSxDQUFDLE1BQU07WUFDckMsMkJBQTJCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFDMUM7WUFDQSwwREFBMEQ7WUFDMUQsOERBQThEO1lBQzlELElBQ0UsQ0FBQyxDQUNDLGdCQUFnQjtnQkFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUN0RCxFQUNEO2dCQUNBLE1BQU0sQ0FBQyxjQUFjLENBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFDckQsZ0JBQWdCLEVBQ2hCO29CQUNFLEdBQUcsRUFBRTt3QkFDSCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUM7b0JBQ3BDLENBQUM7aUJBQ0YsQ0FDRixDQUFDO2FBQ0g7WUFDRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7WUF4RkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLFFBQVEsRUFBRSxjQUFjO2FBQ3pCOzs7O1lBL0JDLFVBQVU7WUFtRDBELE1BQU0sdUJBQXJDLE1BQU0sU0FBQyxNQUFNOzs7Z0NBaEJqRCxLQUFLOytCQUVMLE1BQU07MkJBSU4sV0FBVyxTQUFDLHVCQUF1Qjs4QkFLbkMsV0FBVyxTQUFDLHdCQUF3Qjs7Ozs7OztJQWJyQyx5Q0FBNEI7Ozs7O0lBQzVCLHNEQUF5Qzs7SUFDekMsZ0RBQzRDOztJQUM1QywrQ0FDK0M7O0lBQy9DLHVDQUErQjs7Ozs7SUFZbkIsaUNBQXNCOzs7OztJQUFFLHFDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIEV2ZW50RW1pdHRlcixcbiAgT3V0cHV0LFxuICBPbkRlc3Ryb3ksXG4gIEFmdGVyVmlld0luaXQsXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIE9uSW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFdJTkRPVyB9IGZyb20gJy4uL3dpbmRvdy93aW5kb3ctdG9rZW4nO1xuXG4vKipcbiAqIEEgc2ltcGxlIGxpZ2h0d2VpZ2h0IGxpYnJhcnkgZm9yIEFuZ3VsYXIgd2l0aCB0aGF0IGRldGVjdHMgd2hlbiBhblxuICogZWxlbWVudCBpcyB3aXRoaW4gdGhlIGJyb3dzZXJzIHZpZXdwb3J0IGFuZCBhZGRzIGEgYGluLXZpZXdwb3J0YCBvclxuICogYG5vdC1pbi12aWV3cG9ydGAgY2xhc3MgdG8gdGhlIGVsZW1lbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxwXG4gKiAgY2xhc3M9XCJmb29cIlxuICogIHNuSW5WaWV3cG9ydFxuICogIChpblZpZXdwb3J0Q2hhbmdlKT1cIm15RXZlbnRIYW5kbGVyKCRldmVudClcIj5cbiAqICBBbWV0IHRlbXBvciBleGNlcHRldXIgb2NjYWVjYXQgbnVsbGEuXG4gKiA8L3A+XG4gKiBgYGBcbiAqL1xuLy8gQGR5bmFtaWNcbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzbkluVmlld3BvcnRdJyxcbiAgZXhwb3J0QXM6ICdzbkluVmlld3BvcnQnXG59KVxuZXhwb3J0IGNsYXNzIEluVmlld3BvcnREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gIHByaXZhdGUgaW5WaWV3cG9ydDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBoYXNJbnRlcnNlY3Rpb25PYnNlcnZlcjogYm9vbGVhbjtcbiAgQElucHV0KClcbiAgaW5WaWV3cG9ydE9wdGlvbnM6IEludGVyc2VjdGlvbk9ic2VydmVySW5pdDtcbiAgQE91dHB1dCgpXG4gIGluVmlld3BvcnRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIG9ic2VydmVyOiBJbnRlcnNlY3Rpb25PYnNlcnZlcjtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNuLXZpZXdwb3J0LS1pbicpXG4gIGdldCBpc0luVmlld3BvcnQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaW5WaWV3cG9ydDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc24tdmlld3BvcnQtLW91dCcpXG4gIGdldCBpc05vdEluVmlld3BvcnQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmluVmlld3BvcnQ7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBASW5qZWN0KFdJTkRPVykgcHJpdmF0ZSB3aW5kb3c6IFdpbmRvdykge1xuICAgIHRoaXMuaGFzSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyRmVhdHVyZURldGVjdGlvbigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0ludGVyc2VjdGlvbk9ic2VydmVyKSB7XG4gICAgICB0aGlzLmluVmlld3BvcnQgPSB0cnVlO1xuICAgICAgdGhpcy5pblZpZXdwb3J0Q2hhbmdlLmVtaXQodGhpcy5pblZpZXdwb3J0KTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMuaGFzSW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIGNvbnN0IEludGVyc2VjdGlvbk9ic2VydmVyID0gdGhpcy53aW5kb3dbJ0ludGVyc2VjdGlvbk9ic2VydmVyJ107XG4gICAgICB0aGlzLm9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgICB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyQ2FsbGJhY2suYmluZCh0aGlzKSxcbiAgICAgICAgdGhpcy5pblZpZXdwb3J0T3B0aW9uc1xuICAgICAgKTtcblxuICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIudW5vYnNlcnZlKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgaW50ZXJzZWN0aW9uT2JzZXJ2ZXJDYWxsYmFjayhlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10pIHtcbiAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgaWYgKHRoaXMuaW5WaWV3cG9ydCA9PT0gZW50cnkuaXNJbnRlcnNlY3RpbmcpIHJldHVybjtcbiAgICAgIHRoaXMuaW5WaWV3cG9ydCA9IGVudHJ5LmlzSW50ZXJzZWN0aW5nO1xuICAgICAgdGhpcy5pblZpZXdwb3J0Q2hhbmdlLmVtaXQodGhpcy5pblZpZXdwb3J0KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaW50ZXJzZWN0aW9uT2JzZXJ2ZXJGZWF0dXJlRGV0ZWN0aW9uKCkge1xuICAgIC8vIEV4aXRzIGVhcmx5IGlmIGFsbCBJbnRlcnNlY3Rpb25PYnNlcnZlciBhbmQgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVxuICAgIC8vIGZlYXR1cmVzIGFyZSBuYXRpdmVseSBzdXBwb3J0ZWQuXG4gICAgaWYgKFxuICAgICAgJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB0aGlzLndpbmRvdyAmJlxuICAgICAgJ0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnknIGluIHRoaXMud2luZG93XG4gICAgKSB7XG4gICAgICAvLyBNaW5pbWFsIHBvbHlmaWxsIGZvciBFZGdlIDE1J3MgbGFjayBvZiBgaXNJbnRlcnNlY3RpbmdgXG4gICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93M2MvSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvaXNzdWVzLzIxMVxuICAgICAgaWYgKFxuICAgICAgICAhKFxuICAgICAgICAgICdpc0ludGVyc2VjdGluZycgaW5cbiAgICAgICAgICB0aGlzLndpbmRvd1snSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSddWydwcm90b3R5cGUnXVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgICAgIHRoaXMud2luZG93WydJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5J11bJ3Byb3RvdHlwZSddLFxuICAgICAgICAgICdpc0ludGVyc2VjdGluZycsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0aW9uUmF0aW8gPiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==