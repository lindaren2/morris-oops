import { InjectionToken, Directive, ElementRef, HostBinding, EventEmitter, Output, Inject, Input, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const WINDOW = new InjectionToken('WINDOW', {
    providedIn: 'root',
    factory: () => window
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A simple lightweight library for Angular with that detects when an
 * element is within the browsers viewport and adds a `in-viewport` or
 * `not-in-viewport` class to the element.
 *
 * \@example
 * ```html
 * <p
 *  class="foo"
 *  snInViewport
 *  (inViewportChange)="myEventHandler($event)">
 *  Amet tempor excepteur occaecat nulla.
 * </p>
 * ```
 */
// @dynamic
class InViewportDirective {
    /**
     * @param {?} el
     * @param {?} window
     */
    constructor(el, window) {
        this.el = el;
        this.window = window;
        this.inViewportChange = new EventEmitter();
        this.hasIntersectionObserver = this.intersectionObserverFeatureDetection();
    }
    /**
     * @return {?}
     */
    get isInViewport() {
        return this.inViewport;
    }
    /**
     * @return {?}
     */
    get isNotInViewport() {
        return !this.inViewport;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.hasIntersectionObserver) {
            this.inViewport = true;
            this.inViewportChange.emit(this.inViewport);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.hasIntersectionObserver) {
            /** @type {?} */
            const IntersectionObserver = this.window['IntersectionObserver'];
            this.observer = new IntersectionObserver(this.intersectionObserverCallback.bind(this), this.inViewportOptions);
            this.observer.observe(this.el.nativeElement);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.observer) {
            this.observer.unobserve(this.el.nativeElement);
        }
    }
    /**
     * @param {?} entries
     * @return {?}
     */
    intersectionObserverCallback(entries) {
        entries.forEach(entry => {
            if (this.inViewport === entry.isIntersecting)
                return;
            this.inViewport = entry.isIntersecting;
            this.inViewportChange.emit(this.inViewport);
        });
    }
    /**
     * @private
     * @return {?}
     */
    intersectionObserverFeatureDetection() {
        // Exits early if all IntersectionObserver and IntersectionObserverEntry
        // features are natively supported.
        if ('IntersectionObserver' in this.window &&
            'IntersectionObserverEntry' in this.window) {
            // Minimal polyfill for Edge 15's lack of `isIntersecting`
            // See: https://github.com/w3c/IntersectionObserver/issues/211
            if (!('isIntersecting' in
                this.window['IntersectionObserverEntry']['prototype'])) {
                Object.defineProperty(this.window['IntersectionObserverEntry']['prototype'], 'isIntersecting', {
                    get: function () {
                        return this.intersectionRatio > 0;
                    }
                });
            }
            return true;
        }
        return false;
    }
}
InViewportDirective.decorators = [
    { type: Directive, args: [{
                selector: '[snInViewport]',
                exportAs: 'snInViewport'
            },] }
];
/** @nocollapse */
InViewportDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] }
];
InViewportDirective.propDecorators = {
    inViewportOptions: [{ type: Input }],
    inViewportChange: [{ type: Output }],
    isInViewport: [{ type: HostBinding, args: ['class.sn-viewport--in',] }],
    isNotInViewport: [{ type: HostBinding, args: ['class.sn-viewport--out',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const WINDOW_MOCK_WITHOUT_INTERSECTION_OBSERVER = {
    closed: null,
    defaultStatus: null,
    document: null,
    frameElement: null,
    frames: null,
    history: null,
    innerHeight: null,
    innerWidth: null,
    length: null,
    localStorage: null,
    location: null,
    name: null,
    navigator: null,
    opener: null,
    outerHeight: null,
    outerWidth: null,
    pageXOffset: null,
    pageYOffset: null,
    parent: null,
    screen: null,
    screenLeft: null,
    screenTop: null,
    screenX: null,
    screenY: null,
    sessionStorage: null,
    scrollX: null,
    scrollY: null,
    self: null,
    status: null,
    top: null,
    addEventListener: (...args) => null,
    alert: (...args) => null,
    atob: (...args) => null,
    blur: (...args) => null,
    btoa: (...args) => null,
    clearInterval: (...args) => null,
    clearTimeout: (...args) => null,
    close: (...args) => null,
    confirm: (...args) => null,
    focus: (...args) => null,
    getComputedStyle: (...args) => null,
    getSelection: (...args) => null,
    matchMedia: (...args) => null,
    moveBy: (...args) => null,
    moveTo: (...args) => null,
    open: (...args) => null,
    print: (...args) => null,
    prompt: (...args) => null,
    resizeBy: (...args) => null,
    resizeTo: (...args) => null,
    removeEventListener: (...args) => null,
    scroll: (...args) => null,
    scrollBy: (...args) => null,
    scrollTo: (...args) => null,
    setInterval: (...args) => null,
    setTimeout: (...args) => null,
    stop: (...args) => null
};
/** @type {?} */
const WINDOW_MOCK = Object.assign({}, WINDOW_MOCK_WITHOUT_INTERSECTION_OBSERVER, { IntersectionObserver: (...args) => ({
        observe: () => null,
        unobserve: () => null
    }), IntersectionObserverEntry: class IntersectionObserverEntryMock {
    } });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A simple lightweight library for Angular with other dependencies
 * that detects when an element is within the browsers viewport and adds a
 * sn-viewport--in or sn-viewport--out class to the element.
 */
class InViewportModule {
    /**
     * @return {?}
     */
    static forServer() {
        return {
            ngModule: InViewportModule,
            providers: [{ provide: WINDOW, useValue: WINDOW_MOCK }]
        };
    }
}
InViewportModule.decorators = [
    { type: NgModule, args: [{
                declarations: [InViewportDirective],
                exports: [InViewportDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { InViewportModule, InViewportDirective, WINDOW_MOCK, WINDOW };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,