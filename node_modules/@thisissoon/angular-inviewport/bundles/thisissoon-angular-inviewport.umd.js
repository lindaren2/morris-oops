(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@thisissoon/angular-inviewport', ['exports', '@angular/core'], factory) :
    (factory((global.thisissoon = global.thisissoon || {}, global.thisissoon['angular-inviewport'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var WINDOW = new core.InjectionToken('WINDOW', {
        providedIn: 'root',
        factory: function () { return window; }
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * A simple lightweight library for Angular with that detects when an
     * element is within the browsers viewport and adds a `in-viewport` or
     * `not-in-viewport` class to the element.
     *
     * \@example
     * ```html
     * <p
     *  class="foo"
     *  snInViewport
     *  (inViewportChange)="myEventHandler($event)">
     *  Amet tempor excepteur occaecat nulla.
     * </p>
     * ```
     */
    // @dynamic
    var InViewportDirective = /** @class */ (function () {
        function InViewportDirective(el, window) {
            this.el = el;
            this.window = window;
            this.inViewportChange = new core.EventEmitter();
            this.hasIntersectionObserver = this.intersectionObserverFeatureDetection();
        }
        Object.defineProperty(InViewportDirective.prototype, "isInViewport", {
            get: /**
             * @return {?}
             */ function () {
                return this.inViewport;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InViewportDirective.prototype, "isNotInViewport", {
            get: /**
             * @return {?}
             */ function () {
                return !this.inViewport;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        InViewportDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!this.hasIntersectionObserver) {
                    this.inViewport = true;
                    this.inViewportChange.emit(this.inViewport);
                }
            };
        /**
         * @return {?}
         */
        InViewportDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.hasIntersectionObserver) {
                    /** @type {?} */
                    var IntersectionObserver_1 = this.window['IntersectionObserver'];
                    this.observer = new IntersectionObserver_1(this.intersectionObserverCallback.bind(this), this.inViewportOptions);
                    this.observer.observe(this.el.nativeElement);
                }
            };
        /**
         * @return {?}
         */
        InViewportDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.observer) {
                    this.observer.unobserve(this.el.nativeElement);
                }
            };
        /**
         * @param {?} entries
         * @return {?}
         */
        InViewportDirective.prototype.intersectionObserverCallback = /**
         * @param {?} entries
         * @return {?}
         */
            function (entries) {
                var _this = this;
                entries.forEach(function (entry) {
                    if (_this.inViewport === entry.isIntersecting)
                        return;
                    _this.inViewport = entry.isIntersecting;
                    _this.inViewportChange.emit(_this.inViewport);
                });
            };
        /**
         * @private
         * @return {?}
         */
        InViewportDirective.prototype.intersectionObserverFeatureDetection = /**
         * @private
         * @return {?}
         */
            function () {
                // Exits early if all IntersectionObserver and IntersectionObserverEntry
                // features are natively supported.
                if ('IntersectionObserver' in this.window &&
                    'IntersectionObserverEntry' in this.window) {
                    // Minimal polyfill for Edge 15's lack of `isIntersecting`
                    // See: https://github.com/w3c/IntersectionObserver/issues/211
                    if (!('isIntersecting' in
                        this.window['IntersectionObserverEntry']['prototype'])) {
                        Object.defineProperty(this.window['IntersectionObserverEntry']['prototype'], 'isIntersecting', {
                            get: function () {
                                return this.intersectionRatio > 0;
                            }
                        });
                    }
                    return true;
                }
                return false;
            };
        InViewportDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[snInViewport]',
                        exportAs: 'snInViewport'
                    },] }
        ];
        /** @nocollapse */
        InViewportDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: Window, decorators: [{ type: core.Inject, args: [WINDOW,] }] }
            ];
        };
        InViewportDirective.propDecorators = {
            inViewportOptions: [{ type: core.Input }],
            inViewportChange: [{ type: core.Output }],
            isInViewport: [{ type: core.HostBinding, args: ['class.sn-viewport--in',] }],
            isNotInViewport: [{ type: core.HostBinding, args: ['class.sn-viewport--out',] }]
        };
        return InViewportDirective;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var WINDOW_MOCK_WITHOUT_INTERSECTION_OBSERVER = {
        closed: null,
        defaultStatus: null,
        document: null,
        frameElement: null,
        frames: null,
        history: null,
        innerHeight: null,
        innerWidth: null,
        length: null,
        localStorage: null,
        location: null,
        name: null,
        navigator: null,
        opener: null,
        outerHeight: null,
        outerWidth: null,
        pageXOffset: null,
        pageYOffset: null,
        parent: null,
        screen: null,
        screenLeft: null,
        screenTop: null,
        screenX: null,
        screenY: null,
        sessionStorage: null,
        scrollX: null,
        scrollY: null,
        self: null,
        status: null,
        top: null,
        addEventListener: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        alert: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        atob: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        blur: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        btoa: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        clearInterval: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        clearTimeout: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        close: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        confirm: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        focus: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        getComputedStyle: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        getSelection: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        matchMedia: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        moveBy: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        moveTo: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        open: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        print: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        prompt: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        resizeBy: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        resizeTo: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        removeEventListener: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        scroll: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        scrollBy: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        scrollTo: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        setInterval: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        setTimeout: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        },
        stop: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return null;
        }
    };
    /** @type {?} */
    var WINDOW_MOCK = __assign({}, WINDOW_MOCK_WITHOUT_INTERSECTION_OBSERVER, { IntersectionObserver: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return ({
                observe: function () { return null; },
                unobserve: function () { return null; }
            });
        }, IntersectionObserverEntry: /** @class */ (function () {
            function IntersectionObserverEntryMock() {
            }
            return IntersectionObserverEntryMock;
        }()) });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * A simple lightweight library for Angular with other dependencies
     * that detects when an element is within the browsers viewport and adds a
     * sn-viewport--in or sn-viewport--out class to the element.
     */
    var InViewportModule = /** @class */ (function () {
        function InViewportModule() {
        }
        /**
         * @return {?}
         */
        InViewportModule.forServer = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: InViewportModule,
                    providers: [{ provide: WINDOW, useValue: WINDOW_MOCK }]
                };
            };
        InViewportModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [InViewportDirective],
                        exports: [InViewportDirective]
                    },] }
        ];
        return InViewportModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.InViewportModule = InViewportModule;
    exports.InViewportDirective = InViewportDirective;
    exports.WINDOW_MOCK = WINDOW_MOCK;
    exports.WINDOW = WINDOW;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,